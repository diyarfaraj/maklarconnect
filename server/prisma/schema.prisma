// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  email       String     @unique
  password    String
  isSocialLogin Boolean?  @default(false)
  username    String?    @unique
  fullName    String?
  description String?
  profileImage String?
  isProfileInfoSet Boolean? @default(false)
  createdAt   DateTime   @default(now())
  properties        Property[]     // Embedding the Gigs array in the User document
  orders      Order[]   // Embedding the Orders array in the User document
  reviews     Review[]  // Embedding the Reviews array in the User document
    messagesSent    Message[]  @relation("MessageToSender")
  messagesReceived Message[] @relation("MessageToReceiver")
}

model Property {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String?
  description  String?
  applicantType String?
  horizon       String?
  propertyType  String?
  minPrice      String?
  maxPrice      String?
  minArea       String?
  maxArea       String?
  minRooms      String?
  maxRooms      String?
  locations     String[] // Assuming locations are stored as an array of strings
  features      Json?      // JSON object for features
  amenities     Json?      // JSON object for amenities
  createdAt    DateTime @default(now())
  images       String[]
  createdBy    User?     @relation(fields: [userId], references: [id])
  userId       String?   // Using String as the id type for the User reference
  orders       Order[]   // Embedding the Orders array in the Property document
  reviews      Review[]  // Embedding the Reviews array in the Property document
}



model Order {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  buyer         User      @relation(fields: [buyerId], references: [id])
  buyerId       String    // Using String as the id type for the User reference
  paymentIntent String    @unique
  isCompleted   Boolean   @default(false)
  property           Property      @relation(fields: [propertyId], references: [id])
  propertyId         String    // Using String as the id type for the Gigs reference
  price         Int
  messages      Message[] // Embedding the Messages array in the Orders document
  
}

model Review {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  rating     Int       // Add a field to store the rating for the review
  comment    String?   // Add a field to store the comment or review text (optional)
  createdAt  DateTime  @default(now())

  // Define a relation to the User who received the review
  recipient   User      @relation(fields: [recipientId], references: [id])
  recipientId String    // Using String as the id type for the User reference

  // Define a relation to the Gig that was reviewed
  property         Property      @relation(fields: [propertyId], references: [id])
  propertyId       String    // Using String as the id type for the Gigs reference
}

model Message {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  createdAt    DateTime  @default(now())

    sender       User      @relation(name: "MessageToSender", fields: [senderId], references: [id])
  senderId     String    @db.ObjectId
  receiver     User      @relation(name: "MessageToReceiver", fields: [receiverId], references: [id])
  receiverId   String    @db.ObjectId
  order        Order?    @relation(fields: [orderId], references: [id])
  orderId      String?   @db.ObjectId
}
